/*
Ќапишите код, который решает следующую задачу:
»меетс€ вектор размера N. Ќеобходимо разделить его на M < N равных частей (то есть чтобы количество элементов в каждой части было одинаковым). „асти не должны пересекатьс€ и должны покрывать весь вектор (исключение - допускаютс€ промежутки от начала вектора до начала первой части и от конда последней части до конца вектора, но в этом случае необходимо добитьс€, чтобы разница в величине этих промежутков была минимальной).
–езультатом должны €вл€тьс€ индексы начала и конца каждой части (либо вывод на экран, либо сохранение в любую структуру данных).
–еализаци€ требуетс€ на —++ и/или Python.
C++
*/

#include <iostream>
#include <cstdlib>


int main(int argc, char **argv){

	if (argc < 3)
		return 0;

	typedef long integer;

	integer n = std::atol(argv[1]);
	integer m = std::atol(argv[2]);

	if (n<=0 || m<=0 || m > n){
		return 0;
	}

	integer k{0};
	integer k_x_m = m;
	while (k_x_m <= n){
		k_x_m += m;
		k++;
	}
	//ћинимизирую разницу между отступами ? Ќе совсем пон€л эту часть задани€
	integer shift = 1 + (integer) (n - ( k_x_m - m) ) / 2;
	k--;
	//¬ывод результата 
	
	for (integer last = shift + k; last <= n;){
		std::cout << "[" << shift << "," << last <<"] "<<'\n';
		last++;
		shift = last;
		last +=k;

	}
	return 0;
}